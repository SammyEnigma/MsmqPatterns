namespace BusterWood.Msmq
{
    public enum MessageClass
    {
        /// <summary>
        /// A normal Message Queuing message
        /// </summary>
        Normal = 0x00,

        /// <summary>
        /// Message class sent by MSMQ to <see cref="Message.AdministrationQueue"/>
        /// </summary>
        Report = 0x01,

        /// <summary>
        /// The access rights for placing messages in the destination queue are not allowed for the sending application.
        /// </summary>
        AccessDenied = (1 << 15) | 0x04,

        /// <summary>
        /// The destination queue is not available to the sending application
        /// </summary>
        BadDestinationQueue = (1 << 15),

        BadEncryption = (1 << 15) | 0x07,

        BadSignature = (1 << 15) | 0x06,

        CouldNotEncrypt = (1 << 15) | 0x08,

        /// <summary>
        /// The hop count of the original message is exceeded
        /// </summary>
        HopCountExceeded = (1 << 15) | 0x05,

        /// <summary>
        /// A transactional message was sent to a non-transactional queue
        /// </summary>
        NotTransactionalQueue = (1 << 15) | 0x09,

        /// <summary>
        /// A non-transactional message was sent to a transactional queue.
        /// </summary>
        NotTransactionalMessage = (1 << 15) | 0x0a,

        /// <summary>
        /// The message was purged before reaching the destination queue
        /// </summary>
        Purged = (1 << 15) | 0x01,

        /// <summary>
        /// The queue was deleted before the original message could be read from the queue
        /// </summary>
        QueueDeleted = (1 << 15) | (1 << 14),

        /// <summary>
        /// the message was rejected by the destination queue manager because the destination queue exceeded Quota.
        /// </summary>
        QueueExceedQuota = (1 << 15) | 0x03,

        /// <summary>
        /// The queue was purged and the original message no longer exists
        /// </summary>
        QueuePurged = (1 << 15) | (1 << 14) | 0x01,

        /// <summary>
        /// The message was delivered to its destination queue
        /// </summary>
        ReachQueue = 0x02,

        /// <summary>
        /// the message did not reach the destination queue. 
        /// This message can be generated by expiration of either the <see cref="Message.TimeToBeReceived"/> time or <see cref="Message.TimeToReachQueue"/> time before the message reaches the destination queue.
        /// </summary>
        ReachQueueTimeout = (1 << 15) | 0x02,

        /// <summary>
        /// The message was retrieved by the receiving application
        /// </summary>
        Received = (1 << 14),

        /// <summary>
        /// The message was placed in the destination queue but was not retrieved from the queue before its time-to-be-received timer expired.
        /// </summary>
        ReceiveTimeout = (1 << 15) | (1 << 14) | 0x02,

        /// <summary>
        /// The message was rejected by a receiving application. Note the message was consumed from the queue but could not be processed.
        /// </summary>
        ReceiveRejected = 0xC004,
    }
}